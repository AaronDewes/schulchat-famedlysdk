variables:
  FLUTTER_VERSION: "3.3.8"

# update deps and format files
.flutter_deps_and_format:
  before_script:
    - curl -s https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${FLUTTER_VERSION}-stable.tar.xz | tar xfJ - -C /tmp
    - export PATH="$PATH:/tmp/flutter/bin"
    - sed -i "s#git@git.fairkom.net:#https://gitlab-ci-token:$CI_JOB_TOKEN@git.fairkom.net/#g" pubspec.yaml
    - flutter pub get

flutter_analyze:
  extends:
    - .flutter_deps_and_format
  script: [flutter analyze --no-fatal-infos]

lint:
  extends:
    - .flutter_deps_and_format
  script:
    - flutter pub run import_sorter:main --no-comments --exit-if-changed
    - flutter format lib/ test/ --set-exit-if-changed

coverage:
  tags: [docker]
  script:
    #TODO install olm?
    - docker build -f docker/Dockerfile.coverage -t sdk-coverage --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA .
    - docker create --name coverage sdk-coverage
    - docker cp coverage:famedlysdk/coverage .
    - docker cp coverage:famedlysdk/coverage.xml .
    - docker cp coverage:famedlysdk/TEST-report.xml .
    - docker cp coverage:/tmp/test.exitcode .
    - docker rm coverage
    - exit $(< test.exitcode)
  coverage: /^\s*lines\.*:\s*\d+.\d+\%/
  artifacts:
    when: always
    paths:
      - coverage/
      - coverage.xml
      - TEST-report.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: TEST-report.xml

#coverage_without_olm:
#  stage: test
#  image: dart
#  dependencies: []
#  variables:
#    NO_OLM: 1
#  before_script:
#    - apt-get update && apt-get install --no-install-recommends --no-install-suggests -y curl lcov python3 python3-distutils
#    - curl -o /bin/lcov_cobertura.py https://raw.githubusercontent.com/eriwen/lcov-to-cobertura-xml/master/lcov_cobertura/lcov_cobertura.py && sed 's/env python/env python3/' -i /bin/lcov_cobertura.py && chmod +x /bin/lcov_cobertura.py
#  script:
#    - dart pub get
#    - ./scripts/test.sh
#  #coverage: /^\s*lines\.*:\s*\d+.\d+\%/ <- broken see https://github.com/dart-lang/test/issues/1698
#  artifacts:
#    when: always
#    paths:
#      #- coverage/
#      #- coverage.xml
#      - TEST-report.xml
#    reports:
#      #coverage_report:
#      #  coverage_format: cobertura
#      #  path: coverage.xml
#      junit: TEST-report.xml

e2ee_test:
  tags: [docker]
    #  services:
    #    - docker:dind
  parallel:
    matrix:
      - HOMESERVER:
          - dendrite
  script:
    - docker stop dendrite || true
    - docker stop dockere2e || true
    - docker stop dummy || true
    - docker rm dendrite || true #not sure if the job deletes the container if the job fails
    - docker rm dockere2e || true
    - docker rm dummy || true
    - docker volume rm dendrite || true
    - docker build -f docker/Dockerfile.e2e -t docker-e2e --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA .
    - docker volume create dendrite
    - docker run --rm --entrypoint="" --volume=dendrite:/mnt:rw matrixdotorg/dendrite-monolith:latest /usr/bin/generate-keys -private-key /mnt/matrix_key.pem -tls-cert /mnt/server.crt -tls-key /mnt/server.key
    - docker run --rm -d --volume=dendrite:/mnt --name dummy debian:bullseye-slim sh -c 'while ! test -e /mnt/dendrite.yaml;do sleep 2;done' #something's broken with docker, maybe docker:dind helps, but I'm unable to access the volume directory from the upper most container. So let's start a dummy container only for the purpose of copying the file...
    - docker cp test_driver/dendrite/data/dendrite.yaml dummy:/mnt
    - docker run -d --volume=dendrite:/etc/dendrite:rw --name dendrite -p 80:8008 matrixdotorg/dendrite-monolith:latest -really-enable-open-registration
    - docker run -d --name dockere2e -t docker-e2e
    - while [ -z $DENDRITE_IP ];do export DENDRITE_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' dendrite);sleep 2;done
    - export DENDRITE_IP=$DENDRITE_IP:8008
    - echo $DENDRITE_IP
    - sed -i "s/notknownyet/$DENDRITE_IP/g" docker/e2e.entrypoint
    - docker cp docker/e2e.entrypoint dockere2e:famedlysdk/entrypoint.sh
    - docker exec -i dockere2e ./entrypoint.sh
    - docker stop dendrite
    - docker stop dockere2e
    - docker rm dendrite
    - docker rm dockere2e
    - docker volume rm dendrite
  timeout: 10m
